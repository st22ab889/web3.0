1. 哈希指针(hash pointers)
    不仅要保存结构体的指针,还要保存结构体的hash值

2. 比特币中一个最基本的数据结构就是区块链(一个个区块组成的链表)

3. 普通链表和区块的链表区别:
    用hash指针代替普通的指针。

4. 如下图:
    每个区块都包含一个指向前一个区块的Hash指针
    取hash是吧整个区块的内容(包括区块里面的哈希指针)合在一起取hash
    通过这样的结构可以实现 tamper-evident log
		—————————————————    	—————————————————		—————————————————		—————————————————      ————————————————————
		|				|    	|				|		|				|		|				|      |			      |	 
		| genesis block | <---  | 				| <---  | 				| <---  | 				| <--- |most recent block |  
		|               |    	|               |		|               |		|               |      |                  |
		—————————————————    	—————————————————		—————————————————		—————————————————      ————————————————————
		
5. 比特币中另外的一个数据结构是哈希树, 又称为默克尔树(Merkle Tree)  
    "Merkle tree" 和 "binary tree" 的区别: 
        用hash指针代替普通的指针.
    梅克尔树是一种树，大多数是二叉树，也可以多又树，无论是几又树，它都具有树结构的所有特点。
        树的叶子节点(最下面的节点)是 data blocks，一个 data blocks 代表一个交易
        非叶子节点保存的是 hash point (也就是上面一级保存下面一级的 hash point).
        可以根据根节点的 hash point 可以检测出整个tree的修改 
    Merkle tree 的用途:
        提供 Merkle proof. 

    比特币中各个区块用  hash point 连接在一起, 每个区块所包含的交易是组织成一个 Merkle tree 形式

    每个区块分为两部分，块头(block header)和块身（block body）
        "Merkle tree" 的 "根hash值" 存在 "block header" 中.
        "block header" 中没有交易的具体内容.
        "block body" 中有交易的列表.

    ‌比特币中节点的类型‌：
        全节点(Full Node): 保存整个区块的内容, 比如 "block header" 和 "block body", 全节点是都有的. 有交易的具体信息.
        轻节点(Light Node): 比如手机上的比特币钱包的应用属于轻节点, 只保存 "block header". 如何知道 一笔交易 写进区块链中, 因为轻节点保存 Merkle tree root hash value 去溯源，也就是 Merkle proof

6. 假设某个轻节点想知道一个交易(梅克尔树的一个叶子节点)是不是被包含在了这颗"Merkle tree"中, 轻节点没有保存交易列表，没有这颗"Merkle tree"的具体内容，只有一个根hash值，因为根hash值保存在"block header"中。
        结合"03-BTC-数据结构.jpg"图看：
        这个轻节点下某个全节点发出请求,请求一个能够证明这个交易被包含在这颗"Merkle tree"中的"Merkle proof".
        全节点收到这个请求之后,只需把"Merkle tree"中交易节点 到 根节点的三个hash值(图中的红色细体"H()")发给轻节点. 
        有了这些hash值之后，轻节点可以在本地计算出另外的三个hash值(标记为绿色粗体的"H()"), 首先根据交易(图中标记为TX的换色快)计算出Hash, 一直计算出根节点的hash值.
        轻节点把这个根hash值和"block header"中的根hash值相比较,结果能知道这个交易有没有在这个 "Merkle tree" 中. 
        这种证明也叫做 proof of membership 或者 proof of inclusion
        从叶子节点找到根节点的时间和空间的复杂度是: O(logn) , 对数级别的, 效率很高.
     
    如何证明"Merkle tree"中没有包含哪个交易(proof of non-membership): (下面只是大概描述,详细信息需看视频)
        最简单的证明方法,把整棵树发给轻节点.轻节点验证整个树的构造(每个节点)都是对的.这个方法比较笨, 时间复杂度是 O(n), 时间复杂度是线性的.
        如果对叶节点(交易节点)进行hash(sorted merkle tree), 然后排序, 使用 二分法 查找，效率就会高很多.
        比特币中没有用到这种排号的序"merkle tree"，因为比特币中不需要做这种"不存在"证明


    只要数据结构是无环的, 都可以用 hash 指针代替 普通指针. 
    在循坏链表中使用hash指针代替普通指针的问题, 因为第一个区块的hash指针依赖下一个区块的内容，下一个区块的内容又依赖与下下一个区块的内容, 就出现了循坏依赖, 每个区块的hash point 都定不下来.